res = [
    [0, 1, 29, '01'],
    [0, 2, 28, '02'],
    [0, 3, 56, '023'],
    [1, 0, 29, '10'],
    [1, 2, 57, '102'],
    [1, 3, 85, '1023'],
    [2, 0, 28, '20'],
    [2, 1, 57, '201'],
    [2, 3, 28, '23'],
    [3, 0, 56, '320'],
    [3, 1, 85, '3201'],
    [3, 2, 28, '32']
]

def find_paths(res, start_vertex, vertices_to_visit, current_path, current_distance, visited):
    if not vertices_to_visit:
        return [(current_path, current_distance)]

    all_paths = []

    for entry in res:
        if entry[0] == start_vertex and entry[1] in vertices_to_visit and entry[1] not in visited:
            new_vertices_to_visit = vertices_to_visit.copy()
            new_vertices_to_visit.remove(entry[1])

            new_path = current_path + str(entry[1])
            new_distance = current_distance + entry[2]

            new_visited = visited.copy()
            new_visited.append(start_vertex)

            subpaths = find_paths(res, entry[1], new_vertices_to_visit, new_path, new_distance, new_visited)
            all_paths.extend(subpaths)

    return all_paths
    
start_vertex = int(input("Enter the start vertex: "))
vertices_to_visit = list(map(int, input("Enter the vertices to visit (comma-separated): ").split(',')))

all_paths = find_paths(res, start_vertex, vertices_to_visit, str(start_vertex), 0, [start_vertex])

for path, distance in all_paths:
    print("Path:", path)
    print("Distance:", distance)
print()
print(all_paths)
